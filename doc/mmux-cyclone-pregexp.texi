\input texinfo.tex
@c %**start of header
@setfilename mmux-cyclone-pregexp.info
@settitle @sc{mmux} Cyclone Pregexp
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Pregexp for Cyclone

@c To be used as @value{PACKAGE} whenever we need to include the full name of this package.
@set PACKAGE                    @sc{mmux} Cyclone Pregexp

@c To be used as @value{PACKAGE} whenever we need to include the nickname of the project: the name
@c that is used to compose the distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-cyclone-pregexp

@c To be used as @value{AUTHOR} whenever we need to include the list of authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the email of the *single* author
@c of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the list of copyright years.
@set COPYRIGHT_YEARS            2020

@set CYCLONE_VERSION            0.17

@c ------------------------------------------------------------

@set PackageStem                pregexp

@set PackageAutoconfPrefix      MMUX_CYCLONE_PREGEXP
@set PackagePkgconfigModule     mmux-cyclone-pregexp

@set GithubUrl                  @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BitbucketUrl               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DownloadUrl                @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DocumentationUrl           @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------

@macro mmux{}
@sc{mmux}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a Cyclone language library
implementing regular expressions.  Cyclone is a Scheme-to-C compiler supporting the language
features as defined in the ``Revised^7 Report on Scheme''.

The package supports @posix{} platforms.  This package should work with Cyclone version
@value{CYCLONE_VERSION}.

The latest release can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Copyright @copyright{} 1999-2015 Dorai Sitaram.@*
Modified in 2009, 2010, 2013, 2020 by Marco Maggi @email{mrc.mgg@@gmail.com}

@quotation
Permission to copy, modify, distribute, and use this work or a modified copy of this work, for any
purpose, is hereby granted, provided that the copy includes this copyright notice, and in the case
of a modified copy, also includes a notice of modification.  This work is provided as is, with no
warranty of any kind.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-cyclone-pregexp: (mmux-cyclone-pregexp).  Regular expressions library for Cyclone Scheme.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* intro::                       Introduction.
* api::                         Interface procedures.
* syntax::                      The regexp pattern language.
* example::                     An extended example.

Appendices

* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


@cindex @library{mmux.cyclone.pregexp}, library
@cindex Library @library{mmux.cyclone.pregexp}


This document describes version @value{VERSION} of @value{PACKAGE}, a Cyclone language library
implementing regular expressions.  Cyclone is a Scheme-to-C compiler supporting the language
features as defined in the ``Revised^7 Report on Scheme''.

This package supports @posix{} platforms.  This package should work with Cyclone version
@value{CYCLONE_VERSION}.

This distribution is a repackaging of Dorai Sitaram's Pregexp library.  Pregexp is a portable
implementation of regular expressions (regexps) that runs in any @rnrs{5} or @rnrs{4} compliant
implementations of the programming language Scheme, and in Common Lisp.  The regexp notation
supported is compatible with Perl's, and includes such powerful directives as:

@itemize
@item
Numeric quantifiers.

@item
Non--greedy quantifiers.

@item
POSIX character classes.

@item
Non--capturing clusters (in addition to the usual capturing kind).

@item
Selective (i.e., per--cluster) case-insensitivity.

@item
Selective space--insensitivity (with provision for comments).

@item
Backreferences.

@item
Alternation.

@item
Backtrack pruning.

@item
Lookahead (positive and negative).

@item
Lookbehind (positive and negative).
@end itemize

This is in addition to the more basic directives familiar to all regexp users.

The package installs the library @library{mmux.cyclone.pregexp} along with its import libraries; to
require the library and import its syntactic bindings in a module we can do:

@example
(import (mmux.cyclone.pregexp))
@end example

@c page
@node version
@chapter Version functions


@value{PACKAGE}'s version number follows the specification of @dfn{Semantic Versioning} version 2.0
as outlined at:

@center @url{https://semver.org/}

@noindent
the following functions are available to inspect the version specification at runtime.


@defun mmux-pregexp-@value{PackageStem}-package-major-version
Return a fixnum representing the package's major version number.  As example, if the full semantic
version is @samp{1.2.3-devel.0+x86-64}: the major version number is the fixnum @samp{1}.
@end defun


@defun mmux-pregexp-@value{PackageStem}-package-minor-version
Return a fixnum representing the package's minor version number.  As example, if the full semantic
version is @samp{1.2.3-devel.0+x86-64}: the minor version number is the fixnum @samp{2}.
@end defun


@defun mmux-pregexp-@value{PackageStem}-package-patch-level
Return a fixnum representing the package's patch level number.  As example, if the full semantic
version is @samp{1.2.3-devel.0+x86-64}: the patch level number is the fixnum @samp{3}.
@end defun


@defun mmux-pregexp-@value{PackageStem}-package-prerelease-tag
Return a string representing the package's prerelease tag.  As example, if the full semantic version
is @samp{1.2.3-devel.0+x86-64}: the prerelease tag is the string @samp{"devel.0"}.  This string may
be empty.
@end defun


@defun mmux-pregexp-@value{PackageStem}-package-build-metadata
Return a string representing the package's build metadata.  As example, if the full semantic version
is @samp{1.2.3-devel.0+x86-64}: the build metadata is the string @samp{"x86-64"}.  This string may
be empty.  We need to remember that this specification segment must contain only @ascii{}
alphanumerics and hyphen @samp{[0-9A-Za-z-]}; underscores are @strong{not} allowed.
@end defun


@defun mmux-pregexp-@value{PackageStem}-package-version
Return a string representing the package's version.  As example, if the full semantic version is
@samp{1.2.3-devel.0+x86-64}: the package version is the string @samp{"1.2.3-devel.0"}, without the
build metadata.
@end defun


@defun mmux-pregexp-@value{PackageStem}-package-semantic-version
Return a string representing the package's semantic version.  As example, if the full semantic
version is @samp{1.2.3-devel.0+x86-64}: the package version is the string
@samp{"v1.2.3-devel.0+x86-64"}, notice the leading character @samp{v}.
@end defun

@c page
@node intro
@chapter Introduction


A @dfn{regexp} is a string that describes a pattern.  A regexp matcher
tries to match this pattern against (a portion of) another string, which
we will call the text string.  The text string is treated as raw text
and not as a pattern.

Most of the characters in a regexp pattern are meant to match
occurrences of themselves in the text string.  Thus, the pattern
@code{abc} matches a string that contains the characters @code{a},
@code{b}, @code{c} in succession.

In the regexp pattern, some characters act as metacharacters, and some
character sequences act as metasequences.  That is, they specify
something other than their literal selves.  For example, in the pattern
@code{a.c}, the characters @code{a} and @code{c} do stand for themselves
but the metacharacter @code{.} can match any character (other than
newline).  Therefore, the pattern @code{a.c} matches an @code{a},
followed by any character, followed by a @code{c}.

If we needed to match the character @code{.} itself, we escape it, ie,
precede it with a backslash (@code{\}).  The character sequence
@code{\.} is thus a metasequence, since it doesn't match itself but
rather just @code{.}.  So, to match @code{a} followed by a literal
@code{.}  followed by @code{c}, we use the regexp pattern
@code{a\\.c}.@footnote{The double backslash is an artifact of Scheme
strings, not the regexp pattern itself.  When we want a literal
backslash inside a Scheme string, we must escape it so that it shows up
in the string at all.  Scheme strings use backslash as the escape
character, so we end up with two backslashes; one Scheme--string
backslash to escape the regexp backslash, which then escapes the dot.
Another character that would need escaping inside a Scheme string is
@code{"}.}  Another example of a metasequence is @code{\t}, which is a
readable way to represent the tab character.

We will call the string representation of a regexp the U-regexp, where U
can be taken to mean Unix-style or universal, because this notation for
regexps is universally familiar.  Our implementation uses an
intermediate tree--like representation called the S-regexp, where S can
stand for Scheme, symbolic, or s-expression.  S-regexps are more verbose
and less readable than U-regexps, but they are much easier for Scheme's
recursive procedures to navigate.

@c page
@node api
@chapter Interface procedures


@defun pregexp @var{urex}
Takes a U-regexp, which is a string, and returns an S-regexp, which is a
tree.

@example
(pregexp "c.r")
@result{} (:sub (:or (:seq #\c :any #\r)))
@end example

There is rarely any need to look at the S-regexps returned by pregexp.
@end defun


@defun pregexp-match-positions @var{rex} @var{str}
@defunx pregexp-match-positions @var{rex} @var{str} @var{start}
@defunx pregexp-match-positions @var{rex} @var{str} @var{start} @var{past}
Take a regexp pattern, either a U- or an S-regexp, and a text string,
and return a match if the regexp matches (some part of) the text string.

Return @false{} if the regexp did not match the string; and a list of
index pairs if it did match.

@example
(pregexp-match-positions "brain" "bird")
@result{} #f

(pregexp-match-positions "needle" "hay needle stack")
@result{} ((4 . 10))
@end example

In the second example, the integers @math{4} and @math{10} identify the
substring that was matched.  @math{4} is the starting (inclusive) index
and @math{10} the ending (exclusive) index of the matching substring.

@example
(substring "hay needle stack" 4 10)
@result{} "needle"
@end example

Here, @func{pregexp-match-positions}'s return list contains only one
index pair, and that pair represents the entire substring matched by the
regexp.  When we discuss subpatterns later, we will see how a single
match operation can yield a list of submatches.

@func{pregexp-match-positions} takes optional third and fourth arguments
that specify the indices of the text string within which the matching
should take place.

@example
(pregexp-match-positions "needle"
  "his hay needle stack -- my hay needle stack -- her hay needle stack"
  24 43)
@result{} ((31 . 37))
@end example

Note that the returned indices are still reckoned relative to the full
text string.
@end defun


@defun pregexp-match @var{rex} @var{str}
@defunx pregexp-match @var{rex} @var{str} @var{start}
@defunx pregexp-match @var{rex} @var{str} @var{start} @var{past}
Like @func{pregexp-match-positions} but instead of returning index pairs
it returns the matching substrings:

@example
(pregexp-match "brain" "bird")
@result{} #f

(pregexp-match "needle" "hay needle stack")
@result{} ("needle")
@end example
@end defun


@defun pregexp-split @var{rex} @var{str}
Takes a regexp pattern and a text string, and return a list of
substrings of the text string, where the pattern identifies the
delimiter separating the substrings.

@example
(pregexp-split ":"
   "/bin:/usr/bin:/usr/bin/X11:/usr/local/bin")
@result{} ("/bin" "/usr/bin" "/usr/bin/X11" "/usr/local/bin")

(pregexp-split " " "pea soup")
@result{} ("pea" "soup")
@end example

If the first argument can match an empty string, then the list of all
the single--character substrings is returned.

@example
(pregexp-split "" "smithereens")
@result{} ("s" "m" "i" "t" "h" "e" "r" "e" "e" "n" "s")
@end example

To identify one--or--more spaces as the delimiter, take care to use the
regexp @code{" +"}, not @code{" *"}.

@example
(pregexp-split " +" "split pea     soup")
@result{} ("split" "pea" "soup")

(pregexp-split " *" "split pea     soup")
@result{} ("s" "p" "l" "i" "t" "p" "e" "a" "s" "o" "u" "p")
@end example
@end defun


@defun pregexp-replace @var{rex} @var{str} @var{replacement}
Replace the matched portion of the text string by another string.  The
first argument is the pattern, the second the text string, and the third
is the insert string (string to be inserted).

@example
(pregexp-replace "te" "liberte" "ty")
@result{} "liberty"
@end example

If the pattern doesn't occur in the text string, the returned string is
identical (@func{eq?}) to the text string.
@end defun


@defun pregexp-replace* @var{rex} @var{str} @var{replacement}
Replace all matches in the text string by the insert string:

@example
(pregexp-replace* "te" "liberte egalite fraternite" "ty")
@result{} "liberty egality fratyrnity"
@end example

If the pattern doesn't occur in the text string, the returned string is
identical (@func{eq?}) to the text string.
@end defun


@defun pregexp-quote
Take an arbitrary string and returns a U-regexp (string) that precisely
represents it.  In particular, characters in the input string that could
serve as regexp metacharacters are escaped with a backslash, so that
they safely match only themselves.

@example
(pregexp-quote "cons")
@result{} "cons"

(pregexp-quote "list?")
@result{} "list\\?"

(pregexp-quote "([a-z]+) +([0-9]+,)? *([0-9]+)")
@result{} "\\(\\[a-z\\]\\+\\) \\+\\(\\[0-9\\]\\+,\\)\\? \\*\\(\\[0-9\\]\\+\\)"
@end example

@func{pregexp-quote} is useful when building a composite regexp from a
mix of regexp strings and verbatim strings.
@end defun

@c page
@node syntax
@chapter The regexp pattern language


Here is a complete description of the regexp pattern language recognized
by the pregexp procedures.

@menu
* syntax basic::                Basic assertions.
* syntax chars::                Characters and character classes.
* syntax quantifiers::          Quantifiers.
* syntax clusters::             Clusters.
* syntax alternation::          Alternation.
* syntax backtrack::            Backtracking.
* syntax look::                 Looking ahead and behind.
@end menu

@c page
@node syntax basic
@section Basic assertions


The assertions @code{^} and @code{$} identify the beginning and the end
of the text string respectively.  They ensure that their adjoining
regexps match at one or other end of the text string.  Examples:

@example
(pregexp-match-positions "^contact" "first contact")
@result{} #f
@end example

The regexp fails to match because @code{contact} does not occur at the
beginning of the text string.

@example
(pregexp-match-positions "laugh$" "laugh laugh laugh laugh")
@result{} ((18 . 23))
@end example

The regexp matches the last laugh.

The metasequence @code{\b} asserts that a word boundary exists.

@example
(pregexp-match-positions "yack\\b" "yackety yack")
@result{} ((8 . 12))
@end example

The @code{yack} in @code{yackety} doesn't end at a word boundary so it
isn't matched.  The second @code{yack} does and is.

The metasequence @code{\B} has the opposite effect to @code{\b}: It
asserts that a word boundary does not exist.

@example
(pregexp-match-positions "an\\B" "an analysis")
@result{} ((3 . 5))
@end example

The @code{an} that doesn't end in a word boundary is matched.

@c page
@node syntax chars
@section Characters and character classes


Typically a character in the regexp matches the same character in the
text string.  Sometimes it is necessary or convenient to use a regexp
metasequence to refer to a single character.  Thus, metasequences
@code{\n}, @code{\r}, @code{\t}, and @code{\.} match the newline,
return, tab and period characters respectively.

The metacharacter period (@code{.}) matches any character other than
newline.

@example
(pregexp-match "p.t" "pet")
@result{} ("pet")
@end example

It also matches @code{pat}, @code{pit}, @code{pot}, @code{put}, and
@code{p8t} but not @code{peat} or @code{pfffft}.

A character class matches any one character from a set of characters. A
typical format for this is the bracketed character class @code{[...]},
which matches any one character from the non--empty sequence of
characters enclosed within the brackets.@footnote{Requiring a bracketed
character class to be non-empty is not a limitation, since an empty
character class can be more easily represented by an empty string.}
Thus @code{p[aeiou]t} matches pat, pet, pit, pot, put and nothing else.

Inside the brackets, a hyphen (@code{-}) between two characters
specifies the @ascii{} range between the characters.  Eg,
@code{ta[b-dgn-p]} matches tab, tac, tad, and tag, and tan, tao, tap.

An initial caret (@code{^}) after the left bracket inverts the set
specified by the rest of the contents, ie, it specifies the set of
characters other than those identified in the brackets.  Eg,
@code{do[^g]} matches all three--character sequences starting with do
except dog.

Note that the metacharacter @code{^} inside brackets means something
quite different from what it means outside.  Most other metacharacters
(@code{.}, @code{*}, @code{+}, @code{?}, etc.) cease to be
metacharacters when inside brackets, although we may still escape them
for peace of mind.  @code{-} is a metacharacter only when it's inside
brackets, and neither the first nor the last character.

Bracketed character classes cannot contain other bracketed character
classes (although they contain certain other types of character classes;
see below).  Thus a left bracket (@code{[}) inside a bracketed character
class doesn't have to be a metacharacter; it can stand for itself.  Eg,
@code{[a[b]} matches @code{a}, @code{[}, and @code{b}.

Furthermore, since empty bracketed character classes are disallowed, a
right bracket (@code{]}) immediately occurring after the opening left
bracket also doesn't need to be a metacharacter.  Eg, @code{[]ab]}
matches @code{]}, @code{a}, and @code{b}.

@c ------------------------------------------------------------

@subsubheading Some frequently used character classes

Some standard character classes can be conveniently represented as
metasequences instead of as explicit bracketed expressions.  @code{\d}
matches a digit (@code{[0-9]}); @code{\s} matches a whitespace
character; @code{\w} matches a character that could be part of a
``word''.@footnote{Following regexp custom, we identify ``word''
characters as @code{[A-Za-z0-9_]}, although these are too restrictive
for what a Schemer might consider a ``word''.}

The upper--case versions of these metasequences stand for the inversions
of the corresponding character classes.  Thus @code{\D} matches a
non--digit, @code{\S} a non--whitespace character, and @code{\W} a
non--``word'' character.

Remember to include a double backslash when putting these metasequences
in a Scheme string:

@example
(pregexp-match "\\d\\d"
               "0 dear, 1 have 2 read catch 22 before 9")
@result{} ("22")
@end example

These character classes can be used inside a bracketed expression.  Eg,
@code{[a-z\\d]} matches a lower--case letter or a digit.

@c ------------------------------------------------------------

@subsubheading @posix{} character classes

A @posix{} character class is a special metasequence of the form
@code{[:...:]} that can be used only inside a bracketed expression.  The
@posix{} classes supported are:

@table @code
@item [:alnum:]
Letters and digits.

@item [:alpha:]
Letters.

@item [:algor:]
The letters c, h, a and d.

@item [:ascii:]
7-bit ascii characters.

@item [:blank:]
Widthful whitespace, ie, space and tab.

@item [:cntrl:]
``Control'' characters, viz, those with code @math{< 32}.

@item [:digit:]
Digits, same as @code{\d}.

@item [:graph:]
Characters that use ink.

@item [:lower:]
Lower-case letters.

@item [:print:]
Ink-users plus widthful whitespace.

@item [:space:]
Whitespace, same as @code{\s}.

@item [:upper:]
Upper--case letters.

@item [:word:]
Letters, digits, and underscore, same as @code{\w}.

@item [:xdigit:]
Hex digits.
@end table

For example, the regexp @code{[[:alpha:]_]} matches a letter or
underscore.

@example
(pregexp-match "[[:alpha:]_]" "--x--")
@result{} ("x")

(pregexp-match "[[:alpha:]_]" "--_--")
@result{} ("_")

(pregexp-match "[[:alpha:]_]" "--:--")
@result{} #f
@end example

The @posix{} class notation is valid only inside a bracketed expression.
For instance, @code{[:alpha:]}, when not inside a bracketed expression,
will not be read as the letter class.  Rather it is (from previous
principles) the character class containing the characters :, a, l, p, h.

@example
(pregexp-match "[:alpha:]" "--a--")
@result{} ("a")

(pregexp-match "[:alpha:]" "--_--")
@result{} #f
@end example

By placing a caret (@code{^}) immediately after @code{[:}, we get the
inversion of that @posix{} character class.  Thus, @code{[:^alpha]} is
the class containing all characters except the letters.

@c page
@node syntax quantifiers
@section Quantifiers


The quantifiers @code{*}, @code{+}, and @code{?} match respectively:
zero or more, one or more, and zero or one instances of the preceding
subpattern.

@example
(pregexp-match-positions "c[ad]*r" "cadaddadddr")
@result{} ((0 . 11))
(pregexp-match-positions "c[ad]*r" "cr")
@result{} ((0 . 2))

(pregexp-match-positions "c[ad]+r" "cadaddadddr")
@result{} ((0 . 11))
(pregexp-match-positions "c[ad]+r" "cr")
@result{} #f

(pregexp-match-positions "c[ad]?r" "cadaddadddr")
@result{} #f
(pregexp-match-positions "c[ad]?r" "cr")
@result{} ((0 . 2))
(pregexp-match-positions "c[ad]?r" "car")
@result{} ((0 . 3))
@end example

@c ------------------------------------------------------------

@subsubheading  Numeric quantifiers

We can use braces to specify much finer--tuned quantification than is
possible with @code{*}, @code{+}, @code{?}.

The quantifier @code{@{m@}} matches exactly @math{m} instances of the
preceding subpattern.  @math{m} must be a nonnegative integer.

The quantifier @code{@{m,n@}} matches at least @math{m} and at most
@math{n} instances.  @math{m} and @math{n} are nonnegative integers with
@math{m <= n}.  We may omit either or both numbers, in which case
@math{m} defaults to @math{0} and @math{n} to infinity.

It is evident that @code{+} and @code{?} are abbreviations for
@code{@{1,@}} and @code{@{0,1@}} respectively.  @code{*} abbreviates
@code{@{,@}}, which is the same as @code{@{0,@}}.

@example
(pregexp-match "[aeiou]@{3@}" "vacuous")
@result{} ("uou")

(pregexp-match "[aeiou]@{3@}" "evolve")
@result{} #f

(pregexp-match "[aeiou]@{2,3@}" "evolve")
@result{} #f

(pregexp-match "[aeiou]@{2,3@}" "zeugma")
@result{} ("eu")
@end example

@c ------------------------------------------------------------

@subsubheading Non--greedy quantifiers

The quantifiers described above are greedy, i.e., they match the maximal
number of instances that would still lead to an overall match for the
full pattern.

@example
(pregexp-match "<.*>" "<tag1> <tag2> <tag3>")
@result{} ("<tag1> <tag2> <tag3>")
@end example

To make these quantifiers non--greedy, append a @code{?} to them.
Non--greedy quantifiers match the minimal number of instances needed to
ensure an overall match.

@example
(pregexp-match "<.*?>" "<tag1> <tag2> <tag3>")
@result{} ("<tag1>")
@end example

The non--greedy quantifiers are respectively: @code{*?}, @code{+?},
@code{??}, @code{@{m@}?}, @code{@{m,n@}?}.  Note the two uses of the
metacharacter @code{?}.

@c page
@node syntax clusters
@section Clusters


Clustering, i.e., enclosure within parens @code{(...)}, identifies the
enclosed subpattern as a single entity.  It causes the matcher to
capture the submatch, or the portion of the string matching the
subpattern, in addition to the overall match.

@example
(pregexp-match "([a-z]+) ([0-9]+), ([0-9]+)" "jan 1, 1970")
@result{} ("jan 1, 1970" "jan" "1" "1970")
@end example

Clustering also causes a following quantifier to treat the entire
enclosed subpattern as an entity.

@example
(pregexp-match "(poo )*" "poo poo platter")
@result{} ("poo poo " "poo ")
@end example

The number of submatches returned is always equal to the number of
subpatterns specified in the regexp, even if a particular subpattern
happens to match more than one substring or no substring at all.

@example
(pregexp-match "([a-z ]+;)*" "lather; rinse; repeat;")
@result{} ("lather; rinse; repeat;" " repeat;")
@end example

Here the @code{*}--quantified subpattern matches three times, but it is
the last submatch that is returned.

It is also possible for a quantified subpattern to fail to match, even
if the overall pattern matches.  In such cases, the failing submatch is
represented by @false{}.

@example
(define date-re
  ;match `month year' or `month day, year'.
  ;subpattern matches day, if present
  (pregexp "([a-z]+) +([0-9]+,)? *([0-9]+)"))

(pregexp-match date-re "jan 1, 1970")
@result{} ("jan 1, 1970" "jan" "1," "1970")

(pregexp-match date-re "jan 1970")
@result{} ("jan 1970" "jan" #f "1970")
@end example

@c ------------------------------------------------------------

@subsubheading Backreferences

Submatches can be used in the insert string argument of the procedures
@func{pregexp-replace} and @func{pregexp-replace*}.  The insert string
can use @code{\n} as a backreference to refer back to the @math{n}-th
submatch, i.e., the substring that matched the @math{n}-th subpattern.
@code{\0} refers to the entire match, and it can also be specified as
@code{\&}.

@example
(pregexp-replace "_(.+?)_"
  "the _nina_, the _pinta_, and the _santa maria_"
  "*\\1*")
@result{} "the *nina*, the _pinta_, and the _santa maria_"

(pregexp-replace* "_(.+?)_"
  "the _nina_, the _pinta_, and the _santa maria_"
  "*\\1*")
@result{} "the *nina*, the *pinta*, and the *santa maria*"
@end example

@noindent
recall: @code{\S} stands for non--whitespace character:

@example
(pregexp-replace "(\\S+) (\\S+) (\\S+)"
  "eat to live"
  "\\3 \\2 \\1")
@result{} "live to eat"
@end example

Use @code{\\} in the insert string to specify a literal backslash.
Also, @code{\$} stands for an empty string, and is useful for separating
a backreference @code{\n} from an immediately following number.

Backreferences can also be used within the regexp pattern to refer back
to an already matched subpattern in the pattern.  @code{\n} stands for
an exact repeat of the @math{n}-th submatch.@footnote{@code{0}, which is
useful in an insert string, makes no sense within the regexp pattern,
because the entire regexp has not matched yet that you could refer back
to it.}

@example
(pregexp-match "([a-z]+) and \\1"
  "billions and billions")
@result{} ("billions and billions" "billions")
@end example

Note that the backreference is not simply a repeat of the previous
subpattern.  Rather it is a repeat of the particular substring already
matched by the subpattern.

In the above example, the backreference can only match billions.  It
will not match millions, even though the subpattern it harks back to
@code{([a-z]+)} would have had no problem doing so:

@example
(pregexp-match "([a-z]+) and \\1"
  "billions and millions")
@result{} #f
@end example

The following corrects doubled words:

@example
(pregexp-replace* "(\\S+) \\1"
  "now is the the time for all good men to to come to the aid of of the party"
  "\\1")
@result{} "now is the time for all good men to come to the aid of the party"
@end example

The following marks all immediately repeating patterns in a number
string:

@example
(pregexp-replace* "(\\d+)\\1"
  "123340983242432420980980234"
  "@{\\1,\\1@}")
@result{} "12@{3,3@}40983@{24,24@}3242@{098,098@}0234"
@end example

@c ------------------------------------------------------------

@subsubheading Non--capturing clusters

It is often required to specify a cluster (typically for quantification)
but without triggering the capture of submatch information.  Such
clusters are called non--capturing.  In such cases, use @code{(?:}
instead of @code{(} as the cluster opener.  In the following example,
the non--capturing cluster eliminates the ``directory'' portion of a
given pathname, and the capturing cluster identifies the basename.

@example
(pregexp-match "^(?:[a-z]*/)*([a-z]+)$"
  "/usr/local/bin/mzscheme")
@result{} ("/usr/local/bin/mzscheme" "mzscheme")
@end example

@c ------------------------------------------------------------

@subsubheading Cloisters

@cindex pregexp-comment-char

The location between the @code{?} and the @code{:} of a non--capturing
cluster is called a cloister.@footnote{A useful, if terminally cute,
coinage from the abbots of Perl.}  We can put modifiers there that will
cause the enclustered subpattern to be treated specially.  The modifier
@code{i} causes the subpattern to match case--insensitively:

@example
(pregexp-match "(?i:hearth)" "HeartH")
@result{} ("HeartH")
@end example

The modifier @code{x} causes the subpattern to match
space--insensitively, i.e., spaces and comments within the subpattern
are ignored.  Comments are introduced as usual with a semicolon
(@code{;}) and extend till the end of the line.  If we need to include a
literal space or semicolon in a space--insensitized subpattern, escape
it with a backslash.

@example
(pregexp-match "(?x: a   lot)" "alot")
@result{} ("alot")

(pregexp-match "(?x: a  \\  lot)" "a lot")
@result{} ("a lot")

(pregexp-match "(?x:
   a \\ man  \\; \\   ; ignore
   a \\ plan \\; \\   ; me
   a \\ canal         ; completely
   )"
 "a man; a plan; a canal")
@result{} ("a man; a plan; a canal")
@end example

The parameter @func{pregexp-comment-char} contains the comment character
(#\;).  For Perl--like comments,

@example
(parameterise ((pregexp-comment-char #\#))
   ---)
@end example

We can put more than one modifier in the cloister.

@example
(pregexp-match "(?ix:
   a \\ man  \\; \\   ; ignore
   a \\ plan \\; \\   ; me
   a \\ canal         ; completely
   )"
 "A Man; a Plan; a Canal")
@result{} ("A Man; a Plan; a Canal")
@end example

A minus sign before a modifier inverts its meaning.  Thus, we can use
@code{-i} and @code{-x} in a subcluster to overturn the insensitivities
caused by an enclosing cluster.

@example
(pregexp-match "(?i:the (?-i:TeX)book)"
  "The TeXbook")
@result{} ("The TeXbook")
@end example

This regexp will allow any casing for the and book but insists that TeX
not be differently cased.

@c page
@node syntax alternation
@section Alternation


You can specify a list of alternate subpatterns by separating them by
@code{|}.  The @code{|} separates subpatterns in the nearest enclosing
cluster (or in the entire pattern string if there are no enclosing
parens).

@example
(pregexp-match "f(ee|i|o|um)" "a small, final fee")
@result{} ("fi" "i")

(pregexp-replace* "([yi])s(e[sdr]?|ing|ation)"
   "it is energising to analyse an organisation
   pulsing with noisy organisms"
   "\\1z\\2")
@result{} "it is energizing to analyze an organization
   pulsing with noisy organisms"
@end example

Note again that if we wish to use clustering merely to specify a list of
alternate subpatterns but do not want the submatch, use @code{(?:}
instead of @code{(}.

@example
(pregexp-match "f(?:ee|i|o|um)" "fun for all")
@result{} ("fo")
@end example

An important thing to note about alternation is that the leftmost
matching alternate is picked regardless of its length.  Thus, if one of
the alternates is a prefix of a later alternate, the latter may not have
a chance to match.

@example
(pregexp-match "call|call-with-current-continuation"
  "call-with-current-continuation")
@result{} ("call")
@end example

To allow the longer alternate to have a shot at matching, place it
before the shorter one:

@example
(pregexp-match "call-with-current-continuation|call"
  "call-with-current-continuation")
@result{} ("call-with-current-continuation")
@end example

In any case, an overall match for the entire regexp is always preferred
to an overall nonmatch.  In the following, the longer alternate still
wins, because its preferred shorter prefix fails to yield an overall
match.

@example
(pregexp-match "(?:call|call-with-current-continuation) constrained"
  "call-with-current-continuation constrained")
@result{} ("call-with-current-continuation constrained")
@end example

@c page
@node syntax backtrack
@section Backtracking


We've already seen that greedy quantifiers match the maximal number of
times, but the overriding priority is that the overall match
succeed.  Consider:

@example
(pregexp-match "a*a" "aaaa")
@end example

The regexp consists of two subregexps, @code{a*} followed by @code{a}.
The subregexp @code{a*} cannot be allowed to match all four @code{a}'s
in the text string @code{aaaa}, even though @code{*} is a greedy
quantifier.  It may match only the first three, leaving the last one for
the second subregexp.  This ensures that the full regexp matches
successfully.

The regexp matcher accomplishes this via a process called backtracking.
The matcher tentatively allows the greedy quantifier to match all four
@code{a}'s, but then when it becomes clear that the overall match is in
jeopardy, it backtracks to a less greedy match of three @code{a}'s.  If
even this fails, as in the call:

@example
(pregexp-match "a*aa" "aaaa")
@end example

@noindent
the matcher backtracks even further.  Overall failure is conceded only
when all possible backtracking has been tried with no success.

Backtracking is not restricted to greedy quantifiers.  Nongreedy
quantifiers match as few instances as possible, and progressively
backtrack to more and more instances in order to attain an overall
match.  There is backtracking in alternation too, as the more rightward
alternates are tried when locally successful leftward ones fail to yield
an overall match.

@c ------------------------------------------------------------

@subsubheading Disabling backtracking

Sometimes it is efficient to disable backtracking.  For example, we may
wish to commit to a choice, or we know that trying alternatives is
fruitless.  A nonbacktracking regexp is enclosed in @code{(?>...)}.

@example
(pregexp-match "(?>a+)." "aaaa")
@result{} #f
@end example

In this call, the subregexp @code{?>a+} greedily matches all four
@code{a}'s, and is denied the opportunity to backpedal.  So the overall
match is denied.  The effect of the regexp is therefore to match one or
more @code{a}'s followed by something that is definitely non--@code{a}.

@c page
@node syntax look
@section Looking ahead and behind


We can have assertions in our pattern that look ahead or behind to
ensure that a subpattern does or does not occur.  These ``look around''
assertions are specified by putting the subpattern checked for in a
cluster whose leading characters are:

@table @code
@item ?=
Positive lookahead.

@item ?!
Negative lookahead.

@item ?<=
Positive lookbehind.

@item ?<!
Negative lookbehind.
@end table

Note that the subpattern in the assertion does not generate a match in
the final result.  It merely allows or disallows the rest of the match.

@c ------------------------------------------------------------

@subsubheading Lookahead

Positive lookahead (@code{?=}) peeks ahead to ensure that its subpattern
could match.

@example
(pregexp-match-positions "grey(?=hound)"
  "i left my grey socks at the greyhound")
@result{} ((28 . 32))
@end example

The regexp @code{grey(?=hound)} matches grey, but only if it is followed
by hound.  Thus, the first grey in the text string is not matched.

Negative lookahead (@code{?!}) peeks ahead to ensure that its subpattern
could not possibly match.

@example
(pregexp-match-positions "grey(?!hound)"
  "the gray greyhound ate the grey socks")
@result{} ((27 . 31))
@end example

The regexp @code{grey(?!hound)} matches @code{grey}, but only if it is
not followed by @code{hound}.  Thus the @code{grey} just before
@code{socks} is matched.

@c ------------------------------------------------------------

@subsubheading Lookbehind

Positive lookbehind (@code{?<=}) checks that its subpattern could match
immediately to the left of the current position in the text string.

@example
(pregexp-match-positions "(?<=grey)hound"
  "the hound in the picture is not a greyhound")
@result{} ((38 . 43))
@end example

The regexp @code{(?<=grey)hound} matches hound, but only if it is
preceded by grey.

Negative lookbehind (@code{?<!}) checks that its subpattern could not
possibly match immediately to the left.

@example
(pregexp-match-positions "(?<!grey)hound"
  "the greyhound in the picture is not a hound")
@result{} ((38 . 43))
@end example

The regexp @code{(?<!grey)hound} matches @code{hound}, but only if it is
not preceded by @code{grey}.

Lookaheads and lookbehinds can be convenient when they are not
confusing.

@c page
@node example
@chapter An extended example


Here's an extended example@footnote{From: Jeffrey E. F. Friedl,
Mastering Regular Expressions, 2/e, O'Reilly, 2002.}  that covers many
of the features in @library{vicare pregexp}.  The problem is to
fashion a regexp that will match any and only @ip{} addresses or dotted
quads, i.e., four numbers separated by three dots, with each number
between @math{0} and @math{255}.  We will use the commenting mechanism
to build the final regexp with clarity.  First, a subregexp
@code{n0-255} that matches @code{0} through @code{255}.

@example
(define n0-255
  "(?x:
  \\d          ;  0 through   9
  | \\d\\d     ; 00 through  99
  | [01]\\d\\d ;000 through 199
  | 2[0-4]\\d  ;200 through 249
  | 25[0-5]    ;250 through 255
  )")
@end example

The first two alternates simply get all single- and double--digit
numbers.  Since zero--padding is allowed, we need to match both @code{1}
and @code{01}.  We need to be careful when getting @math{3}--digit
numbers, since numbers above @math{255} must be excluded.  So we fashion
alternates to get @code{000} through @code{199}, then @code{200} through
@code{249}, and finally @code{250} through @code{255}.@footnote{Note
that @code{n0-255} lists prefixes as preferred alternates, something we
cautioned against.  However, since we intend to anchor this subregexp
explicitly to force an overall match, the order of the alternates does
not matter.}

An @ip{}--address is a string that consists of four @code{n0-255}s with
three dots separating them.

@example
(define ip-re1
  (string-append
    "^"        ;nothing before
    n0-255     ;the first n0-255,
    "(?x:"     ;then the subpattern of
    "\\."      ;a dot followed by
    n0-255     ;an n0-255,
    ")"        ;which is
    "@{3@}"      ;repeated exactly 3 times
    "$"        ;with nothing following
    ))
@end example

Let's try it out.

@example
(pregexp-match ip-re1
  "1.2.3.4")
@result{} ("1.2.3.4")

(pregexp-match ip-re1
  "55.155.255.265")
@result{} #f
@end example

@noindent
which is fine, except that we also have:

@example
(pregexp-match ip-re1
  "0.00.000.00")
@result{} ("0.00.000.00")
@end example

All--zero sequences are not valid @ip{} addresses!  Lookahead to the
rescue.  Before starting to match @code{ip-re1}, we look ahead to ensure
we don't have all zeros.  We could use positive lookahead to ensure
there is a digit other than zero.

@example
(define ip-re
  (string-append
    "(?=.*[1-9])" ;ensure there's a non-0 digit
    ip-re1))
@end example

Or we could use negative lookahead to ensure that what's ahead isn't
composed of only zeros and dots.

@example
(define ip-re
  (string-append
    "(?![0.]*$)" ;not just zeros and dots
                 ;(note: dot is not metachar inside [])
    ip-re1))
@end example

The regexp @code{ip-re} will match all and only valid @ip{} addresses.

@example
(pregexp-match ip-re
  "1.2.3.4")
@result{} ("1.2.3.4")

(pregexp-match ip-re
  "0.0.0.0")
@result{} #f
@end example

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
the latest release of this package can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Cyclone can be downloaded from:

@center @url{https://github.com/justinethier/cyclone}

The original code is available at (last checked May 16, 2020):

@center @url{https://github.com/ds26gte/pregexp}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function

@printindex fn

@node variable index
@appendix An entry for each variable

@printindex vr

@node type index
@appendix An entry for each type

@printindex tp

@contents
@bye

@c end of file
@c Local Variables:
@c ispell-local-dictionary: "en_GB-ise-w_accents"
@c end:
